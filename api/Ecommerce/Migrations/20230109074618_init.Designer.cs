// <auto-generated />
using System;
using Ecommerce.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230109074618_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Ecommerce.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "bfe502d6-2730-4cb5-9204-950b3dbe2d13",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(2765),
                            IsDeleted = false,
                            Name = "District Brand Analyst",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(2780)
                        },
                        new
                        {
                            Id = "2e3a5d34-df97-4510-8753-9ee23a21fdc1",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3299),
                            IsDeleted = false,
                            Name = "International Solutions Manager",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3303)
                        },
                        new
                        {
                            Id = "1aed7183-3c10-4cfc-9278-9e894d92860e",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3370),
                            IsDeleted = false,
                            Name = "Global Functionality Associate",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3371)
                        },
                        new
                        {
                            Id = "c03da159-e6b4-46e9-a9dd-3c7dbfe62a16",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3412),
                            IsDeleted = false,
                            Name = "Investor Identity Strategist",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3413)
                        },
                        new
                        {
                            Id = "d9865550-b080-4423-9cbf-a87753ecfdcd",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3450),
                            IsDeleted = false,
                            Name = "Customer Research Supervisor",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3451)
                        },
                        new
                        {
                            Id = "819c3b1a-9132-491e-bc76-c96a1a861a24",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3486),
                            IsDeleted = false,
                            Name = "Dynamic Solutions Assistant",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3487)
                        },
                        new
                        {
                            Id = "82a6b2f2-bfad-4db4-bdde-1cd52e52eede",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3520),
                            IsDeleted = false,
                            Name = "Forward Response Analyst",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3521)
                        },
                        new
                        {
                            Id = "14ff024d-5bb7-4ac9-8c45-a02a9c3ab87d",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3555),
                            IsDeleted = false,
                            Name = "Legacy Communications Officer",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3556)
                        },
                        new
                        {
                            Id = "20d9d32a-a410-46fe-a999-7ba96f176d7e",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3591),
                            IsDeleted = false,
                            Name = "Central Mobility Technician",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3592)
                        },
                        new
                        {
                            Id = "f9f18638-8755-4c6d-aa69-49c209d83d2e",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3630),
                            IsDeleted = false,
                            Name = "Legacy Intranet Director",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 448, DateTimeKind.Local).AddTicks(3631)
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ecommerce.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Ecommerce.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Price")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "2d944cfe-b59c-4c5c-b218-3c8ad6b7e63c",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 450, DateTimeKind.Local).AddTicks(9256),
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Awesome Fresh Pants",
                            Price = "965.44",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 450, DateTimeKind.Local).AddTicks(9261)
                        },
                        new
                        {
                            Id = "2152e859-61ba-44a8-aba6-456b1bdc74ed",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 450, DateTimeKind.Local).AddTicks(9892),
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Unbranded Granite Car",
                            Price = "437.95",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 450, DateTimeKind.Local).AddTicks(9896)
                        },
                        new
                        {
                            Id = "6d05bd5d-188e-434e-9d55-9c1ac5cba064",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 450, DateTimeKind.Local).AddTicks(9984),
                            Description = "The automobile layout consists of a front-engine design, with transaxle-type transmissions mounted at the rear of the engine and four wheel drive",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Tasty Soft Cheese",
                            Price = "538.97",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 450, DateTimeKind.Local).AddTicks(9985)
                        },
                        new
                        {
                            Id = "7112d9ef-d477-4ad9-980a-b7849f7d9c06",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(42),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Practical Concrete Fish",
                            Price = "138.79",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(43)
                        },
                        new
                        {
                            Id = "2a9a4cdb-7586-4860-9040-a1eff814c5b0",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(187),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Incredible Frozen Pants",
                            Price = "946.44",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(189)
                        },
                        new
                        {
                            Id = "8c6937ce-4dd9-48d0-9b38-23ce988a413d",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(247),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Rustic Granite Hat",
                            Price = "965.45",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(248)
                        },
                        new
                        {
                            Id = "4b7f74fc-c78d-4920-95ef-16e320c3daa6",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(299),
                            Description = "New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD, power UHD Graphics, OS 10 Home, OS Office A & J 2016",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Handmade Cotton Mouse",
                            Price = "558.57",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(301)
                        },
                        new
                        {
                            Id = "a7d3f1f5-6624-4610-b33f-b0cb6a5c6313",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(364),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Sleek Frozen Bacon",
                            Price = "875.24",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(365)
                        },
                        new
                        {
                            Id = "d65159df-bbee-4ede-81de-4567b785c1f7",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(420),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Intelligent Plastic Bacon",
                            Price = "297.80",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(421)
                        },
                        new
                        {
                            Id = "98bf4d40-550a-4210-a68b-497c9234ec95",
                            CreatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(473),
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            Image = "https://api.lorem.space/image/watch?w=300&h=500",
                            IsDeleted = false,
                            Name = "Ergonomic Plastic Keyboard",
                            Price = "810.68",
                            UpdatedAt = new DateTime(2023, 1, 9, 14, 46, 18, 451, DateTimeKind.Local).AddTicks(474)
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db2c5dce-4232-4e03-8527-8729c2029d2e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9mII8beu8tjw6mh5JAHpWuTWg1l7+tgRnvYClpWpjRh436/61C4W2D087Bn8efjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d42a5b15-7e80-46f8-873b-095b2b247bc7",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88a92330-8f73-4fbb-916b-aec1e1b187cc",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAED5zOQ+dt8K/cxCZeSG0A1dl9HZ6IAie9NS3ac+ccp9ZO7yY1C8cucoF1nTZyDQUGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04a418df-9916-44d0-b5dc-2b6dade7b722",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e5b817f-00a6-41ce-b82e-31744e251e18",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEMRbNZ3zxaCSA+mplWJ8NiHnz/T1r2kYSOjXQlUlQNAt2yp0R7Z4q/V6CGRs/Qiwfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "530bd96f-443e-46ce-883a-79f505422d11",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            RoleId = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c"
                        },
                        new
                        {
                            UserId = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            RoleId = "dddd1a59-3b57-45f6-96b5-91b3e269e87c"
                        },
                        new
                        {
                            UserId = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            RoleId = "b600478d-f98b-4a27-aa95-14563920d28f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c",
                            ConcurrencyStamp = "4321c8ff-bf08-4004-98a3-174be3a19438",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "dddd1a59-3b57-45f6-96b5-91b3e269e87c",
                            ConcurrencyStamp = "e995e4ab-292a-45c0-9b73-f8e04694f3b0",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "b600478d-f98b-4a27-aa95-14563920d28f",
                            ConcurrencyStamp = "38e2ea85-58e1-42a6-b02f-6cd12914e0e7",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.HasOne("Ecommerce.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecommerce.Models.OrderDetail", b =>
                {
                    b.HasOne("Ecommerce.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("Ecommerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Models.Product", b =>
                {
                    b.HasOne("Ecommerce.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecommerce.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
